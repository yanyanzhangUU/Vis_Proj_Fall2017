
class YearChart {

    constructor () {
        this.margin = {top: 10, right: 20, bottom: 30, left: 50};
        let divyearChart = d3.select("#year-chart");
        this.svgBounds = divyearChart.node().getBoundingClientRect();
        this.svgWidth = this.svgBounds.width - this.margin.left - this.margin.right;
        this.svgHeight = 100;
        this.svg = divyearChart.append("svg")
            .attr("width", this.svgWidth)
            .attr("height", this.svgHeight);
	console.log(this.svg)
    }


    update () {

	let yearChartHeight=this.svgHeight;
	let yearC=this;
	let yearCmargin=80;
	
	let yearChartScale=d3.scaleLinear()
		.domain([1940, 2012])
		.range([yearCmargin,this.svgWidth-yearCmargin]);
	
	let elem = this.svg.selectAll("svg")
		.data(this.electionWinners);

	elem.enter()
	    .append("line")
	    .attr("x1", 0)
	    .attr("y1", yearChartHeight/3)
	    .attr("x2", this.svgWidth)
	    .attr("y2", yearChartHeight/3)
	    .style("stroke-dasharray", "3, 3")
	    .style("stroke", "gray");
	
	elem.enter()
	    .append("circle")
	    .attr("cx", function(d){
		return yearChartScale(d.YEAR);		
	    })
	    .attr("cy",yearChartHeight/3)
	    .attr("r", 15)
	    .attr("class", function(d){
		return yearC.chooseClass(d.PARTY);
	    });
	
	let yeartext=elem.enter().append("text")
	    .text(function(d){return d.YEAR;})
	    .attr("dx", function(d){
		return yearChartScale(d.YEAR);		
	    })
	    .attr("dy", 90)
	    .attr("class", "yeartext");

	let ychv= this.svg.selectAll("circle");
	ychv.on("mouseover", function(d){
	    d3.select(this).classed("highlighted", true);
	});
	ychv.on("mouseout", function(d){
	    d3.select(this).classed("highlighted", false);
	});

	ychv.on("click", function(d){
	    ychv.classed("selected", false);
	    d3.select(this).classed("selected", true);
	    d3.csv("data/Year_Timeline_"+d.YEAR+".csv",function(error,electionResult){
		yearC.electoralVoteChart.update(electionResult, yearC.colorScale);
		yearC.votePercentageChart.update(electionResult);
		yearC.tileChart.update(electionResult, yearC.colorScale);
	    });
	});

	let ec=this;

       let brush = d3.brushX().extent([[yearCmargin-50, 60],[this.svgWidth-20, 120]]).on("end", brushed);
	function brushed() {
	    if(d3.event.selection){
	   let selectedstate=[];
	   let s = d3.event.selection;
		let sx = s.map(yearChartScale.invert);

		yeartext.classed("selectedbar", function(d) {
	       if( sx[0] <= d.YEAR && (d.YEAR) <= sx[1]){
		   selectedstate.push(d.YEAR);
	       }
	       return sx[0] <= d.YEAR && d.YEAR <= sx[1]; });
		
		ec.shiftChart.update(selectedstate, "year");
	    }
       }
       let bar=this.svg.append("g").attr("class", "brush").call(brush);



    }

};

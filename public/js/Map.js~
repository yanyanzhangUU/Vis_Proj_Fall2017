/** Class implementing the map view. */
class Map {
    /**
     * Creates a Map Object
     */
    constructor(allData) {
        this.projection = d3.geoConicConformal().scale(150).translate([400, 350]);
	this.allData = allData;
    }
    /**
     * Function that clears the map
     */
    clearMap() {

        // ******* TODO: PART V*******
        // Clear the map of any colors/markers; You can do this with inline styling or by
        // defining a class style in styles.css
	
        // Hint: If you followed our suggestion of using classes to style
        // the colors and markers for hosts/teams/winners, you can use
        // d3 selection and .classed to set these classes on and off here.
	let map = d3.select("#map");
	let point =d3.select("#points");
	
	let countries = map.selectAll(".host")
		.each(function(d){
		    let country = d3.select(this)._groups[0];
		    var cl = country[0].getAttribute("class").split(" ");
		    country[0].setAttribute("class", "countries " +cl[1]);		    
		});
	let coun = map.selectAll(".team")
		.each(function(d){
		    let co = d3.select(this)._groups[0];
		    var cl = co[0].getAttribute("class").split(" ");
		    co[0].setAttribute("class", "countries " +cl[1]);		    
		});

	point.selectAll(".gold")
	    .remove();
	point.selectAll(".silver")
	    .remove();




    }

    /**
     * Update Map with info for a specific FIFA World Cup
     * @param wordcupData the data for one specific world cup
     */
    updateMap(worldcupData) {

        //Clear any previous selections;
        this.clearMap();

        // ******* TODO: PART V *******

        // Add a marker for the winner and runner up to the map.

        // Hint: remember we have a conveniently labeled class called .winner
        // as well as a .silver. These have styling attributes for the two
        // markers.


        // Select the host country and change it's color accordingly.

        // Iterate through all participating teams and change their color as well.

        // We strongly suggest using CSS classes to style the selected countries.


        // Add a marker for gold/silver medalists
	let map = d3.select("#map");

	let point =d3.select("#points");
	
	var winner_pos = this.allData[worldcupData].win_pos;
	var runner_pos = this.allData[worldcupData].ru_pos;
	var host_id = this.allData[worldcupData].host_country_code;
	var teams_id = this.allData[worldcupData].teams_iso;

	let countries = map.selectAll(".countries")
		.each(function(d){
		    let country = d3.select(this)._groups[0];
		    for(var i=0; i<teams_id.length; i++)
			if((country[0].getAttribute("class") == ("countries "+teams_id[i]))&&(country[0].getAttribute("class")!=("countries " + host_id)))
			    country[0].setAttribute("class", "team "+ teams_id[i]);
		    if(country[0].getAttribute("class")==("countries " + host_id))
			country[0].setAttribute("class", "host "+ host_id);


		});
	var projection = d3.geoConicConformal().scale(150).translate([400, 350]);
	var wp=[projection([winner_pos[0], winner_pos[1]])];
	var rp=[projection([runner_pos[0], runner_pos[1]])];

	point.selectAll("gold")
	    .data(wp)
	    .enter()
            .append("circle")
            .attr("cx", function(d){return d[0];})
            .attr("cy", function(d){return d[1];})
	    .attr("r", 8)
            .attr("class", "gold");

	var p2 = point;
	p2.selectAll("silver")
	    .data(rp)
	    .enter().append("circle")
	    .attr("cx", function(d){return d[0];})
            .attr("cy", function(d){return d[1];})
	    .attr("r", 8)
	    .attr("class", "silver");
	
	
    }

    /**
     * Renders the actual map
     * @param the json data with the shape of all countries
     */
    drawMap(world) {


        //(note that projection is a class member
        // updateMap() will need it to add the winner/runner_up markers.)

        // ******* TODO: PART IV *******

        // Draw the background (country outlines; hint: use #map)
        // Make sure and add gridlines to the map

        // Hint: assign an id to each country path to make it easier to select afterwards
        // we suggest you use the variable in the data element's .id field to set the id

        // Make sure and give your paths the appropriate class (see the .css selectors at
        // the top of the provided html file)

	d3.json("data/world.json", function(error, json) {
	    if (error) throw error;
	    var countries = topojson.feature(json, json.objects.countries);

	    let map = d3.select("#map");
	    let path = d3.geoPath()
		    .projection( d3.geoConicConformal().scale(150).translate([400, 350]));
	    
	    map.selectAll(".countries")
		.data(countries.features)
		.enter().append("path")
		.attr("class", function(d){return "countries "+d.id;})
		.attr("d", path);

	    map.append("path")
		.datum(topojson.mesh(json, json.objects.countries, function(a, b) { return a !== b && a.id !== "IRL"; }))
		.attr("d", path)
		.attr("class", "path");
	    
	    let graticule = d3.geoGraticule();
             d3.select("#map").append('path',"#graticule")
		.datum(graticule)
		.attr('class', "grat")
		.attr('d', path)
		.attr('fill', 'none');
	});
    }


}
